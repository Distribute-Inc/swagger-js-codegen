/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&name}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 *
 */

{{methodName}}(parameters) {
if ( parameters === undefined ) {
parameters = [];
}

const domain = this.domain;
let path = '{{&path}}';

let body;

const queryParameters = {};
const headers = {};
if (this.getApiKey) {
  parameters['user-api-key'] = this.getApiKey();
}
const form = {};

{{#isSecure}}
    if ( this.token.isQuery ) {
    queryParameters[this.token.headerOrQueryName] = this.token.value;
    } else if ( this.token.headyOrQueryName ) {
    headers[this.token.headerOrQueryName] = this.token.value;
    }
{{/isSecure}}

{{#parameters}}

    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach((parameterName) => {
                if( new RegExp('{{&pattern}}').test(parameterName) ) {
                queryParameters[parameterName] = parameters[parameterName];
                }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                if( parameters.{{&name}} !== undefined ) {
                queryParameters.{{&name}} = parameters.{{&name}};
                }
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters.{{&name}});
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if( parameters['{{&name}}'] !== undefined ){
            headers['{{&name}}'] = parameters['{{&name}}'];
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
        if( parameters.{{&name}} !== undefined ){
        body = parameters.{{&name}};
        }
    {{/isBodyParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if( parameters.{{&name}} !== undefined ){
            form['{{&name}}'] = parameters.{{&name}};
            }
        {{/isSingleton}}
    {{/isFormParameter}}

    {{#required}}
        if( parameters['{{&name}}'] === undefined ){
        return Promise.reject(new Error('Missing required {{&paramType}} parameter: {{&name}}'));
        }
    {{/required}}

{{/parameters}}

if( parameters.$queryParameters ) {
Object.keys(parameters.$queryParameters).forEach(function(parameterName){
let parameter = parameters.$queryParameters[parameterName];
queryParameters[parameterName] = parameter;
});
}

{{> request}}
}
